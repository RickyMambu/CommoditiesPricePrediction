{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":13236598,"sourceType":"datasetVersion","datasetId":8387901}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/rickymambu/price-prediction-using-lstm?scriptVersionId=265300269\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","source":"# Model Description\n## Arsitektur\n* LSTM Layer (128 units, return_sequences=True) → mempelajari pola sekuensial harga harian.\n* Dropout (0.3) → regularisasi untuk mencegah overfitting.\n* LSTM Layer (64 units) → menangkap pola jangka pendek.\n* Dropout (0.3) → regularisasi tambahan.\n* Dense Hidden Layer (64 units, ReLU) → pemetaan non-linear sebelum output.\n* Dense Output Layer (1 unit) → memprediksi harga hari berikutnya.\n* Optimizer: Adam\n* Loss function: Mean Squared Error (MSE)\n\n## Training\n* Epochs: 150\n* Batch Size: 32\n* Validation Split: 20% dari training data\n* Callbacks:\nEarlyStopping (patience=10, restore_best_weights=True)\nReduceLROnPlateau (turunkan learning rate saat stagnasi)\nModelCheckpoint (simpan model terbaik selama training)\n\n\n## Evaluation\nModel dievaluasi pada test set dan menghasilkan:\n* MSE: 1,293,069.60\n* MAE: 916.23\n* RMSE: 1,137.13\n* Interpretasi: Rata-rata 1. model salah prediksi sekitar Rp 916 per hari.\nIni setara dengan 2–3% error terhadap harga aktual harian\n","metadata":{}},{"cell_type":"markdown","source":"# Setup & Imports\n\nImport library, set random seed, tampilkan file input.","metadata":{}},{"cell_type":"code","source":"\"\"\"\nSetup & imports\nTujuan:\n- Import library yang diperlukan\n- Set random seed agar hasil lebih konsisten\n- Menampilkan file input (opsional)\n\"\"\"\nimport os, random\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error, mean_absolute_error\n\nimport tensorflow as tf\nfrom tensorflow.keras.models import Sequential, load_model\nfrom tensorflow.keras.layers import LSTM, Dense, Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint\n\nimport joblib\n\n# reproducibility\nSEED = 42\nnp.random.seed(SEED)\nrandom.seed(SEED)\ntf.random.set_seed(SEED)\n\n# tampilkan file di folder input (sesuaikan path Kaggle/Colab kamu)\nfor dirname, _, filenames in os.walk('/kaggle/input/commodities'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:23.013625Z","iopub.execute_input":"2025-10-02T15:17:23.013914Z","iopub.status.idle":"2025-10-02T15:17:36.960244Z","shell.execute_reply.started":"2025-10-02T15:17:23.013888Z","shell.execute_reply":"2025-10-02T15:17:36.959457Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Load Dataset\n\nLoad CSV, parse kolom tanggal, urutkan, dan tampilkan ringkasan awal.","metadata":{}},{"cell_type":"code","source":"\"\"\"\nLoad data\n- Load CSV\n- Pastikan kolom tanggal (jika ada) di-parse/diurutkan\n- Tampilkan info singkat dan head\n\"\"\"\nFILE = '/kaggle/input/commodities/bawangputih_complete.csv'  # ganti sesuai\ndf = pd.read_csv(FILE, parse_dates=['date'] if 'date' in pd.read_csv(FILE, nrows=0).columns else None)\n\n# Jika ada kolom date, urutkan berdasarkan date\nif 'date' in df.columns:\n    df = df.sort_values('date').reset_index(drop=True)\n\nprint(\"Shape:\", df.shape)\ndisplay(df.head())\nprint(\"\\nKolom & tipe:\")\nprint(df.dtypes)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:36.961594Z","iopub.execute_input":"2025-10-02T15:17:36.962184Z","iopub.status.idle":"2025-10-02T15:17:37.025289Z","shell.execute_reply.started":"2025-10-02T15:17:36.962156Z","shell.execute_reply":"2025-10-02T15:17:37.024633Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Exploratory Data Analysis (EDA)\n\nLihat ringkasan statistik, missing values, dan plot tren harga.","metadata":{}},{"cell_type":"code","source":"\"\"\"\nExploratory Data Analysis (EDA)\n- Lihat ringkasan statistik\n- Hitung missing per kolom (penting untuk strategi imputasi kita)\n\"\"\"\ndisplay(df.describe(include='all').T)\nprint(\"\\nMissing values per column:\")\nprint(df.isna().sum())\n\n# Visual: trend harga (jika ada kolom 'prices')\nif 'prices' in df.columns:\n    plt.figure(figsize=(12,4))\n    plt.plot(df['prices'])\n    plt.title(\"Trend Harga (prices)\")\n    plt.ylabel(\"Price\")\n    plt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:37.026296Z","iopub.execute_input":"2025-10-02T15:17:37.026625Z","iopub.status.idle":"2025-10-02T15:17:37.321548Z","shell.execute_reply.started":"2025-10-02T15:17:37.026597Z","shell.execute_reply":"2025-10-02T15:17:37.320825Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Feature Engineering & Imputation\n\nBuat fitur lag, rolling mean, delta. Isi NaN dengan strategi konservatif (lag isi harga sekarang, rolling pakai min_periods=1, exogenous ffill/bfill).","metadata":{}},{"cell_type":"code","source":"\"\"\"\nFeature engineering (lag, rolling) tanpa drop NaN\nPrinsip:\n- Rolling mean dihitung dengan min_periods=1 agar tidak NaN di awal\n- Lag dibuat via shift; isi nilai NaN awal dengan strategi konservatif (isi dengan harga saat itu)\n- Exogenous features (cpi, usd_idr, cuaca) diimputasi ffill->bfill\n- Tambahkan fitur turunan (pct change) yang berguna\n\"\"\"\n# pastikan prices ada\nif 'prices' not in df.columns:\n    raise ValueError(\"Data tidak mengandung kolom 'prices' — sesuaikan nama kolom\")\n\n# Copy working df (agar tidak memodifikasi asli)\nd = df.copy()\n\n# Isi missing untuk exogenous dengan forward fill lalu back fill (asumsi missing kecil dan bersifat time series)\nexo_cols = [c for c in ['cpi', 'usd_idr', 'Temperature', 'Curah Hujan', 'Kelembapan'] if c in d.columns]\nif exo_cols:\n    d[exo_cols] = d[exo_cols].ffill().bfill()\n\n# Rolling means — gunakan min_periods=1 supaya early rows punya nilai\nd['rolling_mean_7'] = d['prices'].rolling(window=7, min_periods=1).mean()\nd['rolling_mean_30'] = d['prices'].rolling(window=30, min_periods=1).mean()\n\n# Lag features\nd['lag_1'] = d['prices'].shift(1)\nd['lag_7'] = d['prices'].shift(7)\nd['lag_30'] = d['prices'].shift(30)\n\n# Strategi pengisian NaN untuk lag: isi NaN awal dengan nilai harga saat itu (konservatif)\n# Rationale: pada hari pertama tidak ada history, lebih aman anggap nilai historis = price hari itu\nd['lag_1'] = d['lag_1'].fillna(d['prices'])\nd['lag_7'] = d['lag_7'].fillna(d['prices'])\nd['lag_30'] = d['lag_30'].fillna(d['prices'])\n\n# Delta / pct change\nd['pct_change_1'] = d['prices'].pct_change().fillna(0)\nd['pct_change_7'] = d['prices'].pct_change(periods=7).fillna(0)\n\n# day features (jika ada kolom date)\nif 'date' in d.columns:\n    d['weekday'] = d['date'].dt.dayofweek  # 0=Mon..6=Sun\n    d['day_in_month'] = d['date'].dt.day\n    d['month'] = d['date'].dt.month\nelse:\n    # jika tidak ada date, coba gunakan kolom day_in_month jika tersedia\n    if 'day_in_month' not in d.columns:\n        d['day_in_month'] = 0\n\n# Periksa hasil\ndisplay(d.head(10))\nprint(\"\\nMissing after imputation (should be 0 for features used):\")\nprint(d[['rolling_mean_7','rolling_mean_30','lag_1','lag_7','lag_30','pct_change_1']].isna().sum())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:37.323211Z","iopub.execute_input":"2025-10-02T15:17:37.323688Z","iopub.status.idle":"2025-10-02T15:17:37.362789Z","shell.execute_reply.started":"2025-10-02T15:17:37.323661Z","shell.execute_reply":"2025-10-02T15:17:37.362218Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Final Feature Selection & Correlation Check\n\nPilih fitur final yang dipakai model, cek korelasi antar fitur.","metadata":{}},{"cell_type":"code","source":"\"\"\"\nFinal feature selection\n- Pilih kolom yang akan masuk model (hindari kolom non-numeric)\n- Tampilkan korelasi singkat lagi\n\"\"\"\nfeatures = [\n    'prices', 'rolling_mean_7', 'rolling_mean_30', 'lag_1', 'lag_7', 'lag_30',\n    'pct_change_1', 'pct_change_7', 'weekday', 'day_in_month'\n]\n# tambahkan exogenous jika ada\nfor ex in exo_cols:\n    features.append(ex)\n\n# Pastikan semua ada\nmissing = [c for c in features if c not in d.columns]\nif missing:\n    raise ValueError(\"Kolom hilang: \" + \", \".join(missing))\n\ndf_feat = d[features].copy()\ndisplay(df_feat.head())\n\n# Korelasi fitur (hanya numerik)\nplt.figure(figsize=(10,8))\nsns.heatmap(df_feat.corr(), annot=True, fmt=\".2f\", cmap='coolwarm')\nplt.title(\"Correlation (final features)\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:37.363555Z","iopub.execute_input":"2025-10-02T15:17:37.36381Z","iopub.status.idle":"2025-10-02T15:17:38.217969Z","shell.execute_reply.started":"2025-10-02T15:17:37.363786Z","shell.execute_reply":"2025-10-02T15:17:38.217129Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Scaling & Sequence Preparation\n\nNormalisasi data dengan MinMaxScaler (fit hanya di training portion). Ubah data ke bentuk sequence untuk LSTM (window=30).","metadata":{}},{"cell_type":"code","source":"\"\"\"\nScaling & sequence creation (mencegah data leakage)\n- Kita gunakan window_size = 30\n- Fit scaler hanya pada rows yang akan muncul dalam training sequences\n- Transform seluruh data kemudian buat X,y sequences\n\"\"\"\nraw_values = df_feat.values  # shape (n_rows, n_features)\nn_rows, n_features = raw_values.shape\nwindow_size = 30\n\n# Count sequences available\nseq_count = n_rows - window_size\nif seq_count <= 0:\n    raise ValueError(\"Data tidak cukup untuk window_size yang dipilih\")\n\n# Training sequences count (time-based split)\ntrain_seq_count = int(seq_count * 0.8)\nrows_for_scaler = train_seq_count + window_size  # rows needed to construct training windows\nprint(f\"n_rows={n_rows}, seq_count={seq_count}, train_seq_count={train_seq_count}, rows_for_scaler={rows_for_scaler}\")\n\nscaler = MinMaxScaler()\nscaler.fit(raw_values[:rows_for_scaler, :])  # fit only on training rows (prevent leakage)\n\nscaled_all = scaler.transform(raw_values)     # transform all rows for convenience\n\n# Create sequences\ndef create_sequences_from_scaled(scaled_array, window):\n    X, y = [], []\n    for i in range(len(scaled_array) - window):\n        X.append(scaled_array[i:i+window])\n        y.append(scaled_array[i+window, 0])  # target: kolom 'prices' (index 0)\n    return np.array(X), np.array(y)\n\nX, y = create_sequences_from_scaled(scaled_all, window_size)\nprint(\"Total sequences:\", X.shape, y.shape)\n\n# Split\nX_train, X_test = X[:train_seq_count], X[train_seq_count:]\ny_train, y_test = y[:train_seq_count], y[train_seq_count:]\nprint(\"Shapes -> X_train:\", X_train.shape, \"X_test:\", X_test.shape)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:38.218818Z","iopub.execute_input":"2025-10-02T15:17:38.219039Z","iopub.status.idle":"2025-10-02T15:17:38.234673Z","shell.execute_reply.started":"2025-10-02T15:17:38.219021Z","shell.execute_reply":"2025-10-02T15:17:38.233927Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Build LSTM Model (LSTM_v2_Imputed)\n\nDefinisikan arsitektur model LSTM stacked dengan dropout & dense hidden layer.","metadata":{}},{"cell_type":"code","source":"\"\"\"\nModel architecture: LSTM_v2_Imputed\nArsitektur:\n- LSTM(128, return_sequences=True)\n- Dropout(0.3)\n- LSTM(64)\n- Dropout(0.3)\n- Dense(64, relu)\n- Dense(1)\n\nRationale:\n- Dua LSTM layer membantu model menangkap pola temporal yang kompleks\n- Dropout untuk regularisasi\n- Dense layer membantu mapping non-linear sebelum output\n\"\"\"\nmodel = Sequential([\n    LSTM(128, return_sequences=True, input_shape=(X_train.shape[1], X_train.shape[2])),\n    Dropout(0.3),\n    LSTM(64, return_sequences=False),\n    Dropout(0.3),\n    Dense(64, activation='relu'),\n    Dense(1)\n])\n\nmodel.compile(optimizer='adam', loss='mean_squared_error')\nmodel.summary()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:38.235388Z","iopub.execute_input":"2025-10-02T15:17:38.235761Z","iopub.status.idle":"2025-10-02T15:17:40.505111Z","shell.execute_reply.started":"2025-10-02T15:17:38.235735Z","shell.execute_reply":"2025-10-02T15:17:40.504306Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Train Model with Callbacks\n\nTraining dengan EarlyStopping, ReduceLROnPlateau, dan ModelCheckpoint.","metadata":{}},{"cell_type":"code","source":"\"\"\"\nTraining\n- EarlyStopping: hentikan jika val_loss tidak improve\n- ReduceLROnPlateau: turunkan LR jika plateau\n- ModelCheckpoint: simpan best model\n- Tujuan: optimasi model sambil menghindari overfitting\n\"\"\"\nes = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\nrlr = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=5, verbose=1)\nckpt_path = \"/kaggle/working/LSTM_v2_Imputed_best.h5\"\nmc = ModelCheckpoint(ckpt_path, monitor='val_loss', save_best_only=True, verbose=1)\n\nhistory = model.fit(\n    X_train, y_train,\n    epochs=150,\n    batch_size=32,\n    validation_split=0.2,\n    callbacks=[es, rlr, mc],\n    verbose=1\n)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:40.505901Z","iopub.execute_input":"2025-10-02T15:17:40.506169Z","iopub.status.idle":"2025-10-02T15:17:55.444844Z","shell.execute_reply.started":"2025-10-02T15:17:40.506144Z","shell.execute_reply":"2025-10-02T15:17:55.444201Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Model Evaluation\n\nLoad model terbaik, prediksi pada test set, inverse transform hasil, hitung MSE, MAE, RMSE.","metadata":{}},{"cell_type":"code","source":"\"\"\"\nLoad best model & evaluation\n- Muat model terbaik dari checkpoint\n- Prediksi X_test (scaled)\n- Inverse transform predictions & actual ke skala asli\n- Hitung MSE, MAE, RMSE\n\"\"\"\nif os.path.exists(ckpt_path):\n    model = load_model(ckpt_path)\n\n# Predict (scaled)\npred_scaled = model.predict(X_test)\n\n# inverse transform helper\ndef inv_transform_target(scaled_target_array, scaler, n_features):\n    \"\"\"\n    Inverse transform helper untuk mengembalikan harga ke skala asli.\n    scaled_target_array: array (N,) atau (N,1) berisi target scaled (kolom 0)\n    scaler: scaler yang sudah fit\n    n_features: jumlah fitur total\n    \"\"\"\n    scaled_target_array = scaled_target_array.flatten()  # pastikan bentuk (N,)\n    dummy = np.zeros((len(scaled_target_array), n_features))\n    dummy[:, 0] = scaled_target_array\n    return scaler.inverse_transform(dummy)[:, 0]\n\ny_test_inv = inv_transform_target(y_test, scaler, n_features)\npred_inv = inv_transform_target(pred_scaled, scaler, n_features)\n\nmse = mean_squared_error(y_test_inv, pred_inv)\nmae = mean_absolute_error(y_test_inv, pred_inv)\nrmse = np.sqrt(mse)\n\nprint(f\"MSE: {mse:.2f}, MAE: {mae:.2f}, RMSE: {rmse:.2f}\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:55.44585Z","iopub.execute_input":"2025-10-02T15:17:55.446079Z","iopub.status.idle":"2025-10-02T15:17:56.383802Z","shell.execute_reply.started":"2025-10-02T15:17:55.446062Z","shell.execute_reply":"2025-10-02T15:17:56.383035Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Visualization: Actual vs Predicted & Error Analysis\n\nVisualisasi perbandingan harga aktual vs prediksi, distribusi error, dan loss curve.","metadata":{}},{"cell_type":"code","source":"\"\"\"\nVisualisasi:\n- Actual vs Predicted\n- Error distribution\n- Training/validation loss\n\"\"\"\nplt.figure(figsize=(12,5))\nplt.plot(y_test_inv, label='Actual', color='blue')\nplt.plot(pred_inv, label='Predicted', color='orange')\nplt.title(\"Actual vs Predicted (Test Set)\")\nplt.legend()\nplt.show()\n\n# Error distribution\nerrors = y_test_inv - pred_inv\nplt.figure(figsize=(8,4))\nsns.histplot(errors, bins=40, kde=True)\nplt.title(\"Error distribution (Actual - Predicted)\")\nplt.show()\n\n# Loss curves\nplt.figure(figsize=(8,4))\nplt.plot(history.history['loss'], label='train_loss')\nplt.plot(history.history['val_loss'], label='val_loss')\nplt.yscale('log')\nplt.legend()\nplt.title(\"Training & Validation Loss\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:56.386219Z","iopub.execute_input":"2025-10-02T15:17:56.38675Z","iopub.status.idle":"2025-10-02T15:17:57.09616Z","shell.execute_reply.started":"2025-10-02T15:17:56.386729Z","shell.execute_reply":"2025-10-02T15:17:57.095476Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Save Model & Scaler for Deployment\n\nSimpan model (.h5), scaler (.save), dan metadata JSON.","metadata":{}},{"cell_type":"code","source":"\"\"\"\nSave model & scaler\n- Simpan model LSTM_v2_Imputed dan scaler\n- Catat metadata sederhana (version, date)\n\nMODEL_OUT = \"/kaggle/working/LSTM_v2_Imputed.h5\"\nSCALER_OUT = \"/kaggle/working/price_scaler_v2.save\"\nmodel.save(MODEL_OUT)\njoblib.dump(scaler, SCALER_OUT)\n\n# Tulis metadata\nmeta = {\n    \"model_name\": \"LSTM_v2_Imputed\",\n    \"window_size\": window_size,\n    \"features\": features,\n    \"n_features\": n_features\n}\nimport json\nwith open(\"/kaggle/working/LSTM_v2_Imputed_metadata.json\", \"w\") as f:\n    json.dump(meta, f, indent=2)\nprint(\"Saved model, scaler, and metadata.\")\n\"\"\"\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:57.097065Z","iopub.execute_input":"2025-10-02T15:17:57.097388Z","iopub.status.idle":"2025-10-02T15:17:57.10296Z","shell.execute_reply.started":"2025-10-02T15:17:57.097365Z","shell.execute_reply":"2025-10-02T15:17:57.102204Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Predict Next Day Price\n\nFungsi predict_next_day() untuk prediksi harga besok berdasarkan 30 hari terakhir.","metadata":{}},{"cell_type":"code","source":"\"\"\"\nFungsi predict_next_day\n- Input: model, scaler, raw_values (original features in original scale), window_size\n- Output: predicted price (original scale)\n- Catatan: pastikan raw_values terakhir punya fitur yang telah kita definisikan\n\ndef predict_next_day(model, scaler, raw_values_array, window_size=30):\n    # raw_values_array: ndarray (n_rows, n_features) in original scale (same order as 'features')\n    last_window_raw = raw_values_array[-window_size:, :]\n    last_window_scaled = scaler.transform(last_window_raw)\n    X_input = last_window_scaled.reshape(1, window_size, last_window_scaled.shape[1])\n    pred_scaled = model.predict(X_input)\n    # inverse transform prediction\n    dummy = np.zeros((1, n_features))\n    dummy[0,0] = pred_scaled.flatten()[0]\n    pred_inv = scaler.inverse_transform(dummy)[0,0]\n    return float(pred_inv)\n\n# contoh penggunaan (raw_values adalah df_feat.values dari Cell 5)\npred_next = predict_next_day(model, scaler, df_feat.values, window_size=window_size)\nprint(\"Prediksi harga besok (1-step):\", pred_next)\n\n\"\"\"\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:57.103807Z","iopub.execute_input":"2025-10-02T15:17:57.104059Z","iopub.status.idle":"2025-10-02T15:17:57.123931Z","shell.execute_reply.started":"2025-10-02T15:17:57.104035Z","shell.execute_reply":"2025-10-02T15:17:57.123324Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Simulation: New Price Input & Prediction Update\n\nSimulasikan input harga baru → update sequence → prediksi ulang harga besok.","metadata":{}},{"cell_type":"code","source":"\"\"\"\nSimulasi update harian:\n- Simulasikan admin memasukkan harga hari ini\n- Bangun baris baru dengan fitur (disederhanakan: gunakan last row untuk exogenous)\n- Append ke raw_values (tidak overwrite file asli) lalu panggil predict_next_day\n\n# contoh: input manual\nharga_hari_ini = float(input(\"Masukkan harga hari ini (simulasi): \"))\n\n# gunakan row terakhir sebagai basis fitur\nlast_row_raw = raw_values[-1].copy()  # raw_values diambil dari Cell 6 awal (df_feat.values)\nnew_row = last_row_raw.copy()\nnew_row[0] = harga_hari_ini\n\n# update rolling & lag di new_row: (opsional, sederhana)\n# lebih baik compute new_row fitur sebenarnya via helper fungsi yang memakai history + sumber exogenous\nraw_values_upd = np.vstack([raw_values, new_row])\n\npred_after_input = predict_next_day(model, scaler, raw_values_upd, window_size)\nprint(\"Prediksi harga besok setelah input harga terbaru:\", pred_after_input)\n\"\"\"\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-10-02T15:17:57.124708Z","iopub.execute_input":"2025-10-02T15:17:57.124958Z","iopub.status.idle":"2025-10-02T15:17:57.140838Z","shell.execute_reply.started":"2025-10-02T15:17:57.124936Z","shell.execute_reply":"2025-10-02T15:17:57.139759Z"}},"outputs":[],"execution_count":null}]}